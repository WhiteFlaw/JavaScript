[类] 概念

类的本质依然是函数
抽取对象共用的属性和行为,封装成一个类

对象是由属性和方法构成
利用类生成对象:
class wsy {

}

const xx = new wsy()
通过new生成对象实例时会自动调用constructor即类的构造函数(构建方法)

_______________________________________________________________________

增强型Function构造函数

ES6增强了Function构造函数的功能,现在支持在创建函数时定义默认参数&不定参数;
定义默认参数:
传参时在传入的参数后加一个等号和一个默认值即可;
var add = new Function("first", "second = first", "return first = second");
console.log(add(1,1));   //2;
console.log(add(1));      //2;

传俩参数first和second都等于1;
传一个参数first等于1;second等于first;

________________________________________________________________________________

不定参数:

在传入函数的参数前面加上三个英文句号以使其成为一个不定参数,
不定参数的类型为数组,在参数括号内写入不定参数后,在其之后传入的所有参数均不用书写出
传入后全都会自动放入不定参数的数组里;通过常规的访问单个数组元素的方法即可访问:Array[2];
例:
        function pick(object, ...keys) {
            let res = Object.create(null);

            for (let i = 0, len = keys.length; i < len; i++) {
                res[keys[i]] = object[keys[i]];
            }
            console.log(res);
            return res;
        }
        pick();

...keys包含着在参数object后传入的所有参数
而arguments对象包含着的是包含...keys在内的所有参数;
函数的length属性统计的是传入函数的已命名参数的数量,不定参数的加入不会影响length属性的值;
在本例中pick函数的length为1,其只会计算object.

使用限制:每个函数只能使用一个不定参数,而且这个不定参数要放在所有参数的后面;
无论是否使用不定参数,arguments总是包含所有传入函数的参数;

__________________________________________________________________________________

展开运算符

展开数组,将数组拆分为一个个数组元素,数组不再存在;
Array = [1,2,3,5,6,7]
console.log(...Array)    //1,2,3,5,6,7

__________________________________________________________________________________

name属性

ES6中所有的函数都具有确切的name属性,包括匿名函数的函数表达式

匿名函数表达式doAnotherThing:
var doAnotherThing = function() {
//空函数体;

}

函数doSomeThing:
function doSomeThing() {
//空函数体

}

console.log(doAnotherThing.name)
console.log(doSomeThing.name)

匿名函数表达式的name属性对应这个匿名函数被赋值给的变量的名称;
函数表达式所拥有的名字(即直接写在括号前面的名字),权重比函数本身被赋值给的变量的名称要大;
所以当函数表达式名和被赋值的变量名都存在的时候,函数的name属性优先取函数表达式名作值;


通过bind()函数创建的函数,其名称带有"bound"前缀,而通过function构造函数创建的函数,其名称将是anonymous;
li:
var doSomeThing = function() {
//空函数;
}
console.log(doSomeThing.bind().name); //bound doSomeThing;
console.log((new Function()).name)        ///anonymous;


______________________________________________________________________________________

块级函数

在一段代码块内定义的函数将属于这个块级作用域,在块级作用域外为undefined;
在JavaScript对块级作用域进行预解析时会将块级作用域内的函数和变量进行提升(符合JS常规的预解析机制);
块级作用域中使用let定义的函数表达式不会被提升,但是块级函数会被提升;

if(true) {
console.log(typeof doSomeThing);   //function;

function doSomeThing() {
//空函数;
   }
 doSomeThing();
}
console.log(typeof doSomeThing);   //undefined;
块级函数与块级作用域里let声明的函数表达式类似,一旦在执行过程中因为被调用或者其他情况流出了当前块级作用域,
会立即遭到销毁(甚至不会执行)
但,一旦块级作用域代码块结束执行,这个块级作用域内的函数也会被销毁;


箭头函数

箭头函数没有[[construct]]方法,不能被用作构造函数;
箭头函数没有prototype,没有构建原型,也不能拿new调用;
箭头函数没有this.super.arguments和new.target的绑定,这一系列都由外围最近一层非箭头函数来决定;
箭头函数内的this值不能被改变,在函数的一生中始终保持一致;


_____________________________________________________________________________________
函数尾调用优化

ES6尾调用系统引擎优化;
尾调用:一个函数在另一个函数的末尾被调用;
尾调用时满足以下三个条件可被JS引擎自动优化:
1.尾调用不访问当前栈帧的变量;
2.尾调用是当前函数的最后一条语句;
3.尾调用的结果作为函数值返回;
比如:
function doSomeThing() {
return doSomeThingElse();
//doSomeThingElse的结果立即return返回,不调用任何局部作用域变量,三个条件都满足;
}

但
function doSomeThing() {
return doSomeThingElse();
//doSomeThingElse的结果不返回,不调用任何局部作用域变量,不可优化;
}

和
function doSomeThing() {
return 1 + doSomeThingElse();
doSomeThing()的结果返回后又进行了"+1"的其他操作,这会导致引擎失去优化空间而无法优化;

最难以避免的闭包问题,闭包可以访问作用域中所有的变量,因而导致尾调用优化失效:
function doSomeThing() {
var num = 1;
    func = () => num;
    return func();
//闭包函数func()可以访问局部变量num,即使调用func()后立即返回结果,JS引擎也不能优化这段代码;
    }
}

尾调用常见优化方法

递归函数时最主要的应用场景,此时尾调用的优化效果最为显著:
function factorial(n) {
if(n <= 1) {
return 1;
}else{
       //无法优化,因其在函数调用并返回结果后执行了乘法操作;
        return n* factorial(n - 1);
    }
}

如果要优化这个函数,可以通过默认参数来将乘法操作移出return语句,
结果函数便可以带着这次递归的结果进入到下次递归中:
function factorial(n, p = 1) {
  if(n <= 1) {
       return 1 * p;
}else{
    let result = n * p;
    return factorial(n - 1, result);
    }
}
p的默认值为1.n大于1时先进行一轮n*p,然后把计算结果传递给第二次factorial的调用,
如此引擎即可进行优化;


___________________________________________________________________________________